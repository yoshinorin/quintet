@import
    '_themes',
    '_variables',
    './components/alert.module';

html {
  font-family: $font-families-base;
  font-size:   map-get($font-size, base);
}

body {
  width:          100%;
  height:         100%;
  margin:         0;
  padding:        0;
  font-size:      map-get($font-size, xlarge);
  line-height:    $line-height;
  letter-spacing: $letter-spacing;
  background-color: map-get($main, background-color);
}

h1,
h2,
h3,
h4,
h5,
h6 {
  letter-spacing: -0.05em;
  font-family:    $font-families-headings;
  line-height:    1.45em;
  color:          map-get($colors, headings);
}

h1 {
  margin: 2.7em 0 0.9em 0;
  border-bottom: 0.02em solid map-get($border-colors, 'h1-border-bottom');
  line-height: 1.75em;
}
h2 {
  margin: 2.5em 0 0.4em 0;
}
h3 {
  margin: 1.5em 0 0 0;
}

h4,
h5,
h6 {
  margin: 1em 0 0 0;
}

@each $key, $value in $headings-font-size {
  #{$key} {
    font-size: $value;
  }
}

p {
  margin: 0 0.5em 0.5em 0;
}

sub {
  font-size: map-get($font-size, small);
  opacity: 0.7;
  line-height: 1rem;
}

ul,
ol,
dl {
  margin: 0.2em 0 0.2em 0;
}

.footnote-ref {
  font-size: map-get($font-size, ssmall);
}

.footnotes {
  p {
    font-size: map-get($font-size, ssmall);
  }
  ol {
    font-size: 0.9rem;
  }
  opacity: 0.8;
}

.footnotes-sep {
  margin-top: 2.5em;
}

a {
  &,
  &:hover,
  &:active,
  &:visited {
      cursor:          pointer;
      color:           map-get($colors, link);
      text-decoration: none;
  }
  &:hover {
      color:           map-get($colors, link);
      text-decoration: underline;
  }
}

a.unstyled {
  &,
  &:hover,
  &:active {
    cursor:          pointer !important;
    color:           inherit !important;
    text-decoration: none !important;
  }
  a.link {
    &,
    &:hover,
    &:active {
        text-decoration: underline !important;
    }
  }
}

table {
  width:           100%;
  background:      transparent;
  border-collapse: collapse;
  border-spacing:  0;
  text-align:      left;
  margin:          1em 0 0 0;

  th {
    padding:       0.1em 0.5em;
    font-weight:   bold;
    border-bottom: 0.1em solid map-get($border-colors, 'th-border-bottom');
  }
  td {
    padding: 0.1em 0.5em;
  }
  tr {
    background:     map-get($table-colors, 'tr-background');
    &:nth-child(2n) {
      background:   map-get($table-colors, 'tr-background-secondary');
    }
  }
}

hr {
  margin:     0.4em 0 0;
  outline:    none;
  border:     none;
  border-top: 1px solid map-get($border-colors, 'hr-border-top');
}

dl {
  dt {
    font-weight: bold;
  }
  dd {
    margin-left: 0;
  }
}

acronym,
abbr {
  border-bottom: 0.1em dotted map-get($colors, 'base');
}

// TODO: move somewhere?
blockquote {
  border-left:   0.15em solid map-get($border-colors, 'blockquote-border-left');
  padding:       0 1em;
  font-style:    italic;
  margin:        1.7em 0 1.7em 1.7em;
  opacity:       0.7;

  cite {
    &:before {
      content: ' — ';
      padding: 0 0.3em;
    }
  }
  & > p:first-child {
    margin: 0;
  }
}

code {
  font-family:        $font-families-code;
  font-size:          map-get($font-size, small);
  color:              map-get($highlight, 'base');
  background-color:   map-get($code-basic-colors, 'background');
  border-radius:      2px;
  display:            inline;
  font-weight:        400;
  margin:             0 0.25em;
  padding:            0.3em 0.35em;
}

figure {
  margin-inline-start: 0;
  margin-inline-end: 0;
  .highlight {
    overflow-x: auto;
    overflow-y: hidden;
  }
  .line {
    font-size:        1.6rem;
    letter-spacing:   0.01em;
  }
  table {
    width:  auto;
    margin: 0;
  }
}

// TODO: some value move to _.valiables.scss
// TODO: fix important
figure.highlight,
.codeblock {
  background:       map-get($highlight, 'background');
  color:            map-get($highlight-font, 'night-rider');
  border:           0.1em solid map-get($highlight, 'border-color');
  border-radius:    0.3em;
  overflow-x:       auto;
  overflow-y:       hidden;
  display:          block;
  color:            map-get($colors, 'base');
  line-height:      2.45rem !important;
  font-size:        map-get($font-size, large);

  table {
    display: block;
    width:   100%;
  }

  pre,
  .gutter,
  .code,
  .tag {
    font-family:      $font-families-code;
    border:           none;
    cursor:           text;
  }
  &.plain {
    .gutter {
        display: none;
    }
    overflow-x:     auto;
    overflow-y:     hidden;
  }
  figcaption {
    font-family:  $font-families-code;
    background:   map-get($highlight, 'background');
    color:        map-get($colors, 'base');
  }
  .gutter {
    border-right-color:  map-get($highlight, 'border-light') !important;
    border-right:        1px solid;
    background:          map-get($highlight, 'border-color') !important;
    opacity:             0.7;
  }
  .code {
    padding:       0.1em 0.1em 0.3em 0.6em;
    width:         100%;
    background:    map-get($highlight, 'background');

    pre {
      max-width: calc(#{map-get($main, 'max-width')} - 50px);
    }
  }
  .line {
    height:    map-get($highlight, line-height);
    font-size: map-get($highlight, font-size);
  }
  // common
  .comment,
  .quote,
  .variable {
    color: map-get($highlight-font, 'night-rider');
  }
  .keyword,
  .selector-tag,
  .built_in,
  .name,
  .tag {
    color: map-get($code-basic-colors, 'tag');
  }
  .literal,
  .number {
    color: map-get($highlight-font, 'bondi-blue');
  }
  .string,
  .title,
  .section,
  .attribute,
  .literal,
  .template-tag,
  .template-variable,
  .type,
  .addition {
    color: map-get($highlight-font, 'egyptian-blue');
  }
  .keyword {
    color: map-get($highlight-font, 'cardinal');
  }
  .deletion,
  .selector-attr,
  .selector-pseudo,
  .meta {
    color: map-get($code-basic-colors, 'meta');
  }
  .doctag {
    color: map-get($code-basic-colors, 'doctag');
  }
  .attr {
    color: map-get($code-basic-colors, 'attr');
  }
  .symbol,
  .bullet,
  .link {
    color: map-get($code-basic-colors, 'link');
  }
  .emphasis {
    font-style: italic;
  }
  .strong {
    font-weight: bold;
  }
  // by languages
  // C/C++
  &.cpp .code,
  &.c .code {
    .preprocessor {
      color: map-get($highlight-font, 'persimmon');
    }
    .meta-keyword {
      color: map-get($highlight-font, 'cardinal');
    }
    .title  {
      color: map-get($highlight-font, 'scampi');
    }
  }
  // C#
  &.cs .code {
    .preprocessor,
    .preprocessor .keyword {
      color: map-get($highlight-font, 'night-rider');
    }
    .title {
      color: map-get($highlight-font, 'scampi');
    }
    .xmlDocTag,
    .doctag {
      color: map-get($highlight-font, 'asparagus');
    }
  }
  // CSS
  &.css .code {
    .at_rule,
    .important,
    .meta {
      color: map-get($highlight-font, 'cardinal');
    }
    .attribute,
    .hexcolor,
    .function {
      color: map-get($highlight-font, 'bondi-blue');
    }
    .attr_selector,
    .value {
      color: map-get($highlight-font, 'night-rider');
    }
    .id,
    .class,
    .pseudo,
    .selector-pseudo {
      color: map-get($highlight-font, 'scampi');
    }
    .tag,
    .selector-tag {
      color: map-get($highlight-font, 'asparagus');
    }
  }
  // Diff
  &.diff .code {
    .chunk,
    .meta {
      color:       map-get($highlight-font, 'scampi');
      font-weight: bold;
    }
    .addition {
      color:            map-get($highlight-font, 'limeade');
      background-color: map-get($highlight-font, 'honeydew');
    }
    .deletion {
      color:            map-get($highlight-font, 'free-speech-red');
      background-color: map-get($highlight-font, 'misty-rose');
    }
  }
  // Scala/Java
  &.scala .code,
  &.java .code {
    .title {
      color: map-get($highlight-font, 'scampi');
    }
    .javadoc {
      color: map-get($highlight-font, 'pewter');
    }
    .meta,
    .annotation,
    .javadoctag {
      color: map-get($highlight-font, 'cardinal');
    }
    .params {
      color: map-get($highlight-font, 'bahama-blue');
    }
  }
  // JavaScript
  &.js .code {
    .built_in,
    .title {
      color: map-get($highlight-font, 'scampi');
    }
    .javadoc {
      color: map-get($highlight-font, 'pewter');
    }
    .tag,
    .javadoctag {
      color: map-get($highlight-font, 'cardinal');
    }
    .tag .title {
      color: map-get($highlight-font, 'night-rider');
    }
    .regexp {
      color: map-get($highlight-font, 'persimmon');
    }
  }
  // JSON
  &.json .code {
    .attribute {
      color: map-get($highlight-font, 'egyptian-blue');
    }
  }
  // Nginx
  &.nginx .code {
    .title,
    .attribute {
      color: map-get($highlight-font, 'cardinal');
    }
    .built_in {
      color: map-get($highlight-font, 'bondi-blue');
    }
    .regexp {
      color: map-get($highlight-font, 'egyptian-blue');
    }
  }
  // PHP
  &.php .code {
    .phpdoc,
    .doctag {
      color: map-get($highlight-font, 'cardinal');
    }
    .regexp {
      color: map-get($highlight-font, 'persimmon');
    }
    .title {
      color: map-get($highlight-font, 'scampi');
    }
  }
  // Ruby
  &.ruby .code {
    .parent,
    .title {
      color: map-get($highlight-font, 'scampi');
    }
    .prompt,
    .constant,
    .number,
    .subst .keyword,
    .symbol {
      color: map-get($highlight-font, 'bondi-blue');
    }
  }
  // SQL
  &.sql {
    .built_in {
      color: map-get($highlight-font, 'cardinal');
    }
  }
  // XML, HTML
  &.xml,
  &.html {
    .tag {
      color: map-get($highlight-font, 'night-rider');
    }
    .value {
      color: map-get($highlight-font, 'egyptian-blue');
    }
    .attribute,
    .attr {
      color: map-get($highlight-font, 'scampi');
    }
    .title,
    .name {
      color: map-get($highlight-font, 'asparagus');
    }
  }
  // SCSS
  &.scss {
    .tag,
    .at_rule,
    .important {
      color: map-get($highlight-font, 'cardinal');
    }
    .number,
    .hexcolor,
    .function,
    .attribute {
      color: map-get($highlight-font, 'bondi-blue');
    }
    .built_in {
      color: map-get($highlight-font, 'persimmon');
    }
    .id,
    .pseudo,
    .class,
    .preprocessor,
    .selector-class,
    .selector-id {
      color: map-get($highlight-font, 'scampi');
    }
    .tag,
    .selector-tag {
      color: map-get($highlight-font, 'asparagus');
    }
  }
  // Go
  &.go {
    .typename {
      color: map-get($highlight-font, 'cardinal');
    }
    .built_in,
    .constant {
      color: map-get($highlight-font, 'bondi-blue');
    }
  }
  // YAML
  &.yml {
    .line
    .attr {
      color: map-get($highlight-font, 'asparagus');
    }
    .line,
    .string,
    .type,
    .literal,
    .meta {
      color: map-get($highlight-font, 'egyptian-blue');
    }
  }
}
