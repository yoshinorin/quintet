export const SYNTAX_PREVIEW_HTML = `
<table>
  <tbody>
    <tr>
      <td class="gutter">
        <pre><span class="line">1</span><br /><span class="line">2</span><br /><span class="line">3</span><br /><span class="line">4</span><br /><span class="line">5</span><br /><span class="line">6</span><br /><span class="line">7</span><br /><span class="line">8</span><br /><span class="line">9</span><br /><span class="line">10</span><br /><span class="line">11</span><br /><span class="line">12</span><br /><span class="line">13</span><br /><span class="line">14</span><br /><span class="line">15</span><br /><span class="line">16</span><br /><span class="line">17</span><br /></pre>
      </td>
      <td class="code">
        <pre><span class="line"><span class="comment">// Example code</span></span><br /><span class="line"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">args: List[String]</span>): <span class="type">IO</span>[<span class="type">ExitCode</span>] = {</span><br /><span class="line">  <span class="keyword">val</span> runApp = (<span class="params">maybeTracer: Option[Tracer[IO]]</span>) =></span><br /><span class="line">    <span class="type">Modules</span>.transactorResource.use { tx =></span><br /><span class="line">      <span class="keyword">val</span> modules = <span class="keyword">new</span> <span class="type">Modules</span>(tx)</span><br /><span class="line">      <span class="keyword">val</span> host = <span class="type">Ipv4Address</span>.fromString(modules.config.http.host).getOrElse(ipv4<span class="string">"127.0.0.1"</span>)</span><br /><span class="line">      <span class="keyword">val</span> port = <span class="type">Port</span>.fromInt(modules.config.http.port).getOrElse(port<span class="string">"9001"</span>)</span><br /><span class="line"></span><br /><span class="line">      <span class="keyword">for</span> {</span><br /><span class="line">        _ &lt;- logger.info(<span class="type">ApplicationInfo</span>.asJson)</span><br /><span class="line">        _ &lt;- <span class="type">IO</span>(modules.flywayMigrator.migrate())</span><br /><span class="line">        routes &lt;- modules.router.withCors.map[<span class="type">Kleisli</span>[<span class="type">IO</span>, <span class="type">Request</span>[<span class="type">IO</span>], <span class="type">Response</span>[<span class="type">IO</span>]]](_.orNotFound)</span><br /><span class="line">        httpApp &lt;- <span class="type">IO</span>(<span class="keyword">new</span> <span class="type">HttpAppBuilder</span>(routes, maybeTracer).build)</span><br /><span class="line">        _ &lt;- server(host, port, httpApp).use(_ =&gt; <span class="type">IO</span>.never)</span><br /><span class="line">      } <span class="keyword">yield</span> <span class="type">ExitCode</span>.<span class="type">Success</span></span><br /><span class="line">    }</span><br /><span class="line">}</span></pre>
      </td>
    </tr>
  </tbody>
</table>
`;
